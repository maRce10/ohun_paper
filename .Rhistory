#  read in a list
if (length(bibs) > 0){
combined_bibs_l <- lapply(bibs, readLines)
names(combined_bibs_l) <- gsub("\\.bib$", "", bibs)
# combine bibs in a single one
combined_bibs <- unlist(combined_bibs_l)
# save pool libraries as combined_bibs.bib
writeLines(text = combined_bibs, "combined_bibs.bib")
# check if there are duplicated keys
keys <- grep("@article{", combined_bibs, fixed = TRUE, value = TRUE)
keys <- gsub("@article{", "", keys, fixed = TRUE)
keys <- gsub(",", "", keys, fixed = TRUE)
tab_keys <- table(keys)
if (anyDuplicated(keys)){
print(paste0(sum(tab_keys > 1), " duplicate(s) references found in combined_bibs.bib"))
}
} else writeLines(text = "empty", "combined_bibs.bib")
# Chunk 2: packages
library(knitr)
library(ohun)
library(ggplot2)
library(viridis)
library(kableExtra)
library(rmdwc)
# Chunk 3
# knitr::opts_knit$set(root.dir = rprojroot::find_rstudio_root_file())
# opts_knit$set(root.dir = "..")
# opts_chunk$set(root.dir = "..")
base.dir <- ".."
# Chunk 4: word count
cat(paste("Updated on", Sys.Date(), "<br>"))
word_count <- rmdcount(normalizePath(file.path(base.dir, '/manuscript/manuscript.Rmd')))
word_count_chunk <- rmdcount(normalizePath(file.path(base.dir, '/manuscript/manuscript.Rmd')), exclude='')
cat(paste0("Word count: ", word_count[3], " (including chunks: ", word_count_chunk[3], ")"))
# Chunk 5
library(Rraven)
# read data
manual_ref_thy <- read.csv(file.path(base.dir, "//data/raw/thyroptera/", "manual_annotations_thyroptera.csv"))
manual_ref_tae <- read.csv(file.path(base.dir, "/data/processed/taeniopygia", "manual_selections_Taeniopygia.csv"))
raven_detec <- imp_raven(path = file.path(base.dir, "/data/raw/"), files = "Raven.Band.Limited.Energy.Detector.selections.txt", warbler.format = TRUE)
# raven_ref <- manual_ref[manual_ref$sound.files %in% raven_detec$sound.files, ]
# Chunk 6
diagnose_detection(reference = manual_ref_tae, detection = raven_detec)
# Chunk 7
diag_raven <- diagnose_detection(reference = manual_ref_tae, detection = raven_detec, by.sound.file = TRUE)
head(diag_raven)
# Chunk 8: catalog
# knitr::include_graphics(normalizePath(file.path("./data/raw/thyroptera", "Catalog_p1.jpeg")))
knitr::include_graphics("~/Dropbox/Projects/ohun_paper/data/raw/thyroptera/Catalog_p1.jpeg")
base.dir <- "."
# read manual annotations
manual_ref_thy <- read.csv(file.path(base.dir, "/data/raw/thyroptera/", "manual_annotations_thyroptera.csv"))
# get random subset of 5 sound files for training
set.seed(1)
train_files <- sample(unique(manual_ref_thy$sound.files), size = 5)
train_ref <- manual_ref_thy[manual_ref_thy$sound.files %in% train_files, ]
# the rest for testing
test_files <- setdiff(manual_ref_thy$sound.files, train_files)
test_ref <- manual_ref_thy[manual_ref_thy$sound.files %in% test_files, ]
templates <- get_templates(train_ref, path = file.path(base.dir, "/data/raw/thyroptera/"),  bp = c(10, 50), fast = TRUE, ovlp = , wl = 200, n.sub.spaces = 3)
source("~/Dropbox/R_package_testing/ohun/R/get_templates.R")
source("~/Dropbox/R_package_testing/ohun/R/get_templates.R")
# read manual annotations
manual_ref_thy <- read.csv(file.path(base.dir, "/data/raw/thyroptera/", "manual_annotations_thyroptera.csv"))
# get random subset of 5 sound files for training
set.seed(1)
train_files <- sample(unique(manual_ref_thy$sound.files), size = 5)
train_ref <- manual_ref_thy[manual_ref_thy$sound.files %in% train_files, ]
# the rest for testing
test_files <- setdiff(manual_ref_thy$sound.files, train_files)
test_ref <- manual_ref_thy[manual_ref_thy$sound.files %in% test_files, ]
templates <- get_templates(train_ref, path = file.path(base.dir, "/data/raw/thyroptera/"),  bp = c(10, 50), fast = TRUE, ovlp = , wl = 200, n.sub.spaces = 3)
source("~/Dropbox/R_package_testing/ohun/R/get_templates.R")
# find templates
templates <- get_templates(train_ref, path = data_path,  bp = c(10, 50), fast = TRUE, ovlp = , wl = 200, n.sub.spaces = 3)
templates <- get_templates(train_ref, path = file.path(base.dir, "/data/raw/thyroptera/"),  bp = c(10, 50), fast = TRUE, ovlp = , wl = 200, n.sub.spaces = 3)
source("~/Dropbox/R_package_testing/ohun/R/get_templates.R")
templates <- get_templates(train_ref, path = file.path(base.dir, "/data/raw/thyroptera/"),  bp = c(10, 50), fast = TRUE, ovlp = , wl = 200, n.sub.spaces = 3)
source("~/Dropbox/R_package_testing/ohun/R/get_templates.R")
templates <- get_templates(train_ref, path = file.path(base.dir, "/data/raw/thyroptera/"),  bp = c(10, 50), fast = TRUE, ovlp = , wl = 200, n.sub.spaces = 3)
source("~/Dropbox/R_package_testing/ohun/R/get_templates.R")
templates <- get_templates(train_ref, path = file.path(base.dir, "/data/raw/thyroptera/"),  bp = c(10, 50), fast = TRUE, ovlp = , wl = 200, n.sub.spaces = 3)
source("~/Dropbox/R_package_testing/ohun/R/get_templates.R")
templates <- get_templates(train_ref, path = file.path(base.dir, "/data/raw/thyroptera/"),  bp = c(10, 50), fast = TRUE, ovlp = , wl = 200, n.sub.spaces = 3)
agg_f1 <- aggregate(f1.score ~ threshold + templates, data = opt_detec_train,
mean)
ggplot(agg_f1, aes(x = threshold, y = f1.score, group = templates, color = templates)) +
geom_line() +
geom_point() +
scale_color_viridis_d(end = 1, labels = c("Centroid", "1st", "2nd", "3rd"), alpha = 0.7) +
labs(x= "Cross-correlation threshold", y = "F1 score", color = "Templates")
theme_classic()
agg_f1 <- aggregate(f1.score ~ threshold + templates, data = opt_detec_train,
mean)
ggplot(agg_f1, aes(x = threshold, y = f1.score, group = templates, color = templates)) +
geom_line() +
geom_point() +
scale_color_viridis_d(end = 1, labels = c("Centroid", "1st", "2nd", "3rd"), alpha = 0.7) +
labs(x= "Cross-correlation threshold", y = "F1 score", color = "Templates")
theme_classic()
agg_f1 <- aggregate(f1.score ~ threshold + templates, data = opt_detec_train,
mean)
ggplot(agg_f1, aes(x = threshold, y = f1.score, group = templates, color = templates)) +
geom_line() +
geom_point() +
scale_color_viridis_d(end = 1, labels = c("Centroid", "1st", "2nd", "3rd"), alpha = 0.7) +
labs(x= "Cross-correlation threshold", y = "F1 score", color = "Templates")
source("~/Dropbox/R_package_testing/ohun/R/get_templates.R")
matrix(1:100, nrow = 4)
m <- matrix(1:100, nrow = 4)
colnames(m)
colnames(m)
source("~/Dropbox/R_package_testing/ohun/R/get_templates.R")
templates <- get_templates(train_ref, path = file.path(base.dir, "/data/raw/thyroptera/"),  bp = c(10, 50), fast = TRUE, ovlp = , wl = 200, n.sub.spaces = 3)
source("~/Dropbox/R_package_testing/ohun/R/get_templates.R")
templates <- get_templates(train_ref, path = file.path(base.dir, "/data/raw/thyroptera/"),  bp = c(10, 50), fast = TRUE, ovlp = , wl = 200, n.sub.spaces = 3)
templates <- get_templates(train_ref, path = file.path(base.dir, "/data/raw/thyroptera/"),  bp = c(10, 50), fast = TRUE, ovlp = , wl = 512, n.sub.spaces = 3)
templates$sound.files
# find templates
templates <- get_templates(train_ref, path = data_path,  bp = c(10, 50), fast = TRUE, ovlp = , wl = 200, n.sub.spaces = 3)
templates[, c("sound.files", "selec")]
templates <- get_templates(train_ref, path = file.path(base.dir, "/data/raw/thyroptera/"),  bp = c(10, 50), fast = TRUE, ovlp = , wl = 200, n.sub.spaces = 3)
templates[, c("sound.files", "selec")]
templates <- get_templates(train_ref, path = file.path(base.dir, "/data/raw/thyroptera/"),  bp = c(10, 50), fast = TRUE, ovlp = , n.sub.spaces = 3)
templates[, c("sound.files", "selec")]
templates <- get_templates(train_ref, path = file.path(base.dir, "/data/raw/thyroptera/"),  bp = c(10, 50), fast = TRUE, ovlp = 70, wl = 200, n.sub.spaces = 3)
templates <- get_templates(train_ref, path = file.path(base.dir, "/data/raw/thyroptera/"),  bp = c(10, 50), ovlp = 70, wl = 200, n.sub.spaces = 3)
?par
remove.packages("ohun")
# github packages must include user name ("user/package")
# knitr is require for creating html/pdf/word reports
# kableExtra is used to print pretty formatted tables
# formatR is used for soft-wrapping code
# klippy is used for adding a copy button to each code block
library(knitr)
library(ohun)
library(ggplot2)
library(viridis)
library(kableExtra)
library(rmdwc)
pkgs <- c("kableExtra", "knitr", "rprojroot", "sciRmdTheme", "rmdwc", "whereami", "maRce10/ohun", "ggplot2", "viridis", "rmdwc")
# install/ load packages
out <- lapply(pkgs, function(y) {
# get pakage name
pkg <- strsplit(y, "/")[[1]]
pkg <- pkg[length(pkg)]
# check if installed, if not then install
if (!pkg %in% installed.packages()[,"Package"])  {
if (grepl("/", y))  remotes::install_github(y, force = TRUE) else
install.packages(y)
}
# load package
a <- try(require(pkg, character.only = T), silent = T)
if (!a) remove.packages(pkg)
})
# github packages must include user name ("user/package")
# knitr is require for creating html/pdf/word reports
# kableExtra is used to print pretty formatted tables
# formatR is used for soft-wrapping code
# klippy is used for adding a copy button to each code block
library(knitr)
library(ohun)
library(ggplot2)
library(viridis)
library(kableExtra)
library(rmdwc)
pkgs <- c("kableExtra", "knitr", "rprojroot", "sciRmdTheme", "rmdwc", "whereami", "maRce10/ohun", "ggplot2", "viridis", "rmdwc")
# install/ load packages
out <- lapply(pkgs, function(y) {
# get pakage name
pkg <- strsplit(y, "/")[[1]]
pkg <- pkg[length(pkg)]
# check if installed, if not then install
if (!pkg %in% installed.packages()[,"Package"])  {
if (grepl("/", y))  remotes::install_github(y, force = TRUE) else
install.packages(y)
}
# load package
a <- try(require(pkg, character.only = T), silent = T)
if (!a) remove.packages(pkg)
})
wd <- file.path(rootdir, "data/raw/taeniopygia/")
feature_acoustic_data(path = wd)
wd <- file.path(rootdir, "data/raw/taeniopygia/")
# set working directory as project directory or one directory above,
rootdir <- try(rprojroot::find_rstudio_root_file(), silent = TRUE)
if (is(rootdir, "try-error")) rootdir <-  ".."
opts_knit$set(root.dir = rootdir)
wd <- file.path(rootdir, "data/raw/taeniopygia/")
feature_acoustic_data(path = wd)
sp_ad <- split_acoustic_data(path = wd, sgmt.dur = 5)
sp_ad
write.csv(split_data, "./data/processed/split_data_for_manuscript.csv", row.names = FALSE)
split_data <- split_acoustic_data(path = wd, sgmt.dur = 5)
write.csv(split_data, "./data/processed/split_data_for_manuscript.csv", row.names = FALSE)
split_info <- split_data
write.csv(split_info, "./data/processed/split_data_for_manuscript.csv", row.names = FALSE)
split_info <- read.csv("./data/processed/split_data_for_manuscript.csv")
source("~/Dropbox/R_package_testing/ohun/R/split_acoustic_data.R")
split_info <- split_acoustic_data(path = wd, sgmt.dur = 5)
write.csv(split_info, "./data/processed/split_data_for_manuscript.csv", row.names = FALSE)
head(split_info)
source("~/Dropbox/R_package_testing/ohun/R/split_acoustic_data.R")
split_info <- split_acoustic_data(path = wd, sgmt.dur = 5)
split_info
write.csv(split_info, "./data/processed/split_data_for_manuscript.csv", row.names = FALSE)
wd <- file.path(rootdir, "data/raw/taeniopygia/")
wd_zebra_finch <- file.path(rootdir, "data/raw/taeniopygia/")
# read data
manual_ref_thy <- read.csv(file.path(rootdir, "//data/raw/thyroptera/", "manual_annotations_thyroptera.csv"))
manual_ref_tae <- read.csv(file.path(rootdir, "/data/processed/taeniopygia", "manual_selections_Taeniopygia.csv"))
path_zebra_finch <- file.path(rootdir, "data/raw/taeniopygia/")
manual_ref_tae <- read.csv(file.path(rootdir, "/data/processed/taeniopygia", "manual_selections_Taeniopygia.csv"))
feature_reference(reference = manual_ref_tae)
feature_reference(reference = manual_ref_tae, path = wd_zebra_finch)
# Chunk 1: packages
## add 'developer/' to packages to be installed from github
x <- c("remotes", "maRce10/warbleR", "bioacoustics", "viridis", "ggplot2", "maRce10/ohun", "DT")
aa <- lapply(x, function(y) {
# get pakage name
pkg <- strsplit(y, "/")[[1]]
pkg <- pkg[length(pkg)]
# check if installed, if not then install
if (!pkg %in% installed.packages()[,"Package"])  {
if (grepl("/", y))  remotes::install_github(y, force = TRUE) else
install.packages(y)
}
# load package
try(require(pkg, character.only = T), silent = T)
})
# Chunk 2: chunk opts
opts_knit$set(root.dir = "..")
opts_chunk$set( fig.width = 8, fig.height = 3.5)
data_path <- "./data/raw/thyroptera/"
source("~/Dropbox/R_package_testing/ohun/R/get_templates.R")
# Chunk 3
library(ohun)
library(warbleR)
library(ggplot2)
library(viridis)
# Chunk 7: read data
# read data
manual_ref <- read.csv("./data/raw/thyroptera/manual_annotations_thyroptera.csv", stringsAsFactors = FALSE)
catalog(X = high_snr[1:15, ], flim = c(10, 45), nrow = 3, ncol = 5, ovlp = 90, height = 7.5, width = 20, same.time.scale = TRUE, mar = 0.005, wl = 512, gr = FALSE, spec.mar = 0.4, lab.mar = 0.2, rm.axes = TRUE, by.row = TRUE, box = TRUE, pal = viridis, parallel = 1, collevels = seq(-100, 0, 5), img.prefix = "thyroptera_15_calls", labels = NULL)
# select highest signal to noise ratio calls per individual
manual_ref_snr <- signal_2_noise(X = manual_ref, mar = 0.05)
# select 1 example per sound file
high_snr <- manual_ref_snr[ave(-manual_ref_snr$SNR, manual_ref_snr$sound.files, FUN = rank) <= 1, ]
# create catalogs
catalog(X = high_snr, flim = c(10, 45), nrow = 6, ncol = 5, ovlp = 90, height = 10, width = 20, same.time.scale = TRUE, mar = 0.005, wl = 512, gr = FALSE, spec.mar = 0, lab.mar = 0.001, rm.axes = TRUE, by.row = TRUE, box = FALSE, pal = viridis, collevels = seq(-100, 0, 5), labels = NULL)
# select highest signal to noise ratio calls per individual
manual_ref_snr <- signal_2_noise(X = manual_ref, mar = 0.05)
# read data
manual_ref <- read.csv("./data/raw/thyroptera/manual_annotations_thyroptera.csv", stringsAsFactors = FALSE)
# select highest signal to noise ratio calls per individual
manual_ref_snr <- signal_2_noise(X = manual_ref, mar = 0.05)
warbleR_options(wav.path = "./data/raw/thyroptera/", wl = 300, parallel = 1, bp = "frange", fast = F, threshold = 15, ovlp = 20)
# select highest signal to noise ratio calls per individual
manual_ref_snr <- signal_2_noise(X = manual_ref, mar = 0.05)
# select 1 example per sound file
high_snr <- manual_ref_snr[ave(-manual_ref_snr$SNR, manual_ref_snr$sound.files, FUN = rank) <= 1, ]
# create catalogs
catalog(X = high_snr, flim = c(10, 45), nrow = 6, ncol = 5, ovlp = 90, height = 10, width = 20, same.time.scale = TRUE, mar = 0.005, wl = 512, gr = FALSE, spec.mar = 0, lab.mar = 0.001, rm.axes = TRUE, by.row = TRUE, box = FALSE, pal = viridis, collevels = seq(-100, 0, 5), labels = NULL)
source("~/Dropbox/R_package_testing/warbleR/R/catalog.R")
# create catalogs
catalog(X = high_snr, flim = c(10, 45), nrow = 6, ncol = 5, ovlp = 90, height = 10, width = 20, same.time.scale = TRUE, mar = 0.005, wl = 512, gr = FALSE, spec.mar = 0, lab.mar = 0.001, rm.axes = TRUE, by.row = TRUE, box = FALSE, pal = viridis, collevels = seq(-100, 0, 5), labels = NULL)
source("~/Dropbox/R_package_testing/warbleR/R/pblapply_wrblr_int.R")
# create catalogs
catalog(X = high_snr, flim = c(10, 45), nrow = 6, ncol = 5, ovlp = 90, height = 10, width = 20, same.time.scale = TRUE, mar = 0.005, wl = 512, gr = FALSE, spec.mar = 0, lab.mar = 0.001, rm.axes = TRUE, by.row = TRUE, box = FALSE, pal = viridis, collevels = seq(-100, 0, 5), labels = NULL)
source("~/Dropbox/R_package_testing/warbleR/R/img_wrblr_int.R")
# create catalogs
catalog(X = high_snr, flim = c(10, 45), nrow = 6, ncol = 5, ovlp = 90, height = 10, width = 20, same.time.scale = TRUE, mar = 0.005, wl = 512, gr = FALSE, spec.mar = 0, lab.mar = 0.001, rm.axes = TRUE, by.row = TRUE, box = FALSE, pal = viridis, collevels = seq(-100, 0, 5), labels = NULL)
source("~/Dropbox/R_package_testing/warbleR/R/spectr")
source("~/Dropbox/R_package_testing/warbleR/R/spectro_wrblr_int2.R")
# create catalogs
catalog(X = high_snr, flim = c(10, 45), nrow = 6, ncol = 5, ovlp = 90, height = 10, width = 20, same.time.scale = TRUE, mar = 0.005, wl = 512, gr = FALSE, spec.mar = 0, lab.mar = 0.001, rm.axes = TRUE, by.row = TRUE, box = FALSE, pal = viridis, collevels = seq(-100, 0, 5), labels = NULL)
source("~/Dropbox/R_package_testing/warbleR/R/stft_wrblr_int.R")
# create catalogs
catalog(X = high_snr, flim = c(10, 45), nrow = 6, ncol = 5, ovlp = 90, height = 10, width = 20, same.time.scale = TRUE, mar = 0.005, wl = 512, gr = FALSE, spec.mar = 0, lab.mar = 0.001, rm.axes = TRUE, by.row = TRUE, box = FALSE, pal = viridis, collevels = seq(-100, 0, 5), labels = NULL)
source("~/Dropbox/R_package_testing/warbleR/R/filled_contour_wrblr_int.R")
# create catalogs
catalog(X = high_snr, flim = c(10, 45), nrow = 6, ncol = 5, ovlp = 90, height = 10, width = 20, same.time.scale = TRUE, mar = 0.005, wl = 512, gr = FALSE, spec.mar = 0, lab.mar = 0.001, rm.axes = TRUE, by.row = TRUE, box = FALSE, pal = viridis, collevels = seq(-100, 0, 5), labels = NULL)
high_snr$bottom.freq <- -1
high_snr$top.freq <- 100
# create catalogs
catalog(X = high_snr, flim = c(10, 45), nrow = 6, ncol = 5, ovlp = 90, height = 10, width = 20, same.time.scale = TRUE, mar = 0.005, wl = 512, gr = FALSE, spec.mar = 0, lab.mar = 0.001, rm.axes = TRUE, by.row = TRUE, box = FALSE, pal = viridis, collevels = seq(-100, 0, 5), labels = NULL)
warbleR_options()
# select 1 example per sound file
high_snr <- manual_ref_snr[ave(-manual_ref_snr$SNR, manual_ref_snr$sound.files, FUN = rank) <= 1, ]
# create catalogs
catalog(X = high_snr, flim = c(10, 45), nrow = 6, ncol = 5, ovlp = 90, height = 10, width = 20, same.time.scale = TRUE, mar = 0.005, wl = 512, gr = FALSE, spec.mar = 0, lab.mar = 0.001, rm.axes = TRUE, by.row = TRUE, box = FALSE, pal = viridis, collevels = seq(-100, 0, 5), labels = NULL)
knitr::opts_knit$set(root.dir = normalizePath(".."))
knitr::opts_chunk$set(include = TRUE, eval = TRUE)
data_path <- raw_data_path <- "data/raw/taeniopygia"
preproc_path <- "data/processed/taeniopygia"
figure_path <- "data/processed/taeniopygia/figures"
x <- c("ohun", "Rraven", "warbleR", "pbapply", "remotes", "DT")
out <- lapply(x, function(y) {
# check if installed, if not then install
if (!y %in% installed.packages()[,"Package"])
install.packages(y)
# load package
try(require(y, character.only = T), silent = T)
})
manual_ref <- read.csv(file.path("data/processed/taeniopygia", "manual_selections_Taeniopygia.csv"))
# select highest signal to noise ratio calls per individual
manual_ref_snr <- signal_2_noise(X = manual_ref, mar = 0.05, path = data_path)
# select 1 example per sound file
high_snr <- manual_ref_snr[ave(-manual_ref_snr$SNR, manual_ref_snr$sound.files, FUN = rank) <= 1, ]
high_snr$top.freq <- 12
# create catalogs
catalog(X = high_snr, flim = c(0, 11), nrow = 6, ncol = 3, ovlp = 90, height = 15, width = 20, same.time.scale = TRUE, mar = 0.01, wl = 512, gr = FALSE, spec.mar = 0, lab.mar = 0.001, rm.axes = TRUE, by.row = TRUE, box = TRUE, pal = viridis, parallel = 10, collevels = seq(-140, 0, 5), path = data_path, img.prefix = "same.time")
source("~/Dropbox/R_package_testing/warbleR/R/boxw_wrblr_int.R")
# create catalogs
catalog(X = high_snr, flim = c(0, 11), nrow = 6, ncol = 3, ovlp = 90, height = 15, width = 20, same.time.scale = TRUE, mar = 0.01, wl = 512, gr = FALSE, spec.mar = 0, lab.mar = 0.001, rm.axes = TRUE, by.row = TRUE, box = TRUE, pal = viridis, parallel = 10, collevels = seq(-140, 0, 5), path = data_path, img.prefix = "same.time")
# select 1 example per sound file
high_snr <- manual_ref_snr[ave(-manual_ref_snr$SNR, manual_ref_snr$sound.files, FUN = rank) <= 1, ]
# create catalogs
catalog(X = high_snr, flim = c(0, 11), nrow = 6, ncol = 3, ovlp = 90, height = 15, width = 20, same.time.scale = TRUE, mar = 0.01, wl = 512, gr = FALSE, spec.mar = 0, lab.mar = 0.001, rm.axes = TRUE, by.row = TRUE, box = TRUE, pal = viridis, parallel = 10, collevels = seq(-140, 0, 5), path = data_path, img.prefix = "same.time")
high_snr$bottom.freq <- -1
high_snr$top.freq <- 12
# create catalogs
catalog(X = high_snr, flim = c(0, 11), nrow = 6, ncol = 3, ovlp = 90, height = 15, width = 20, same.time.scale = TRUE, mar = 0.01, wl = 512, gr = FALSE, spec.mar = 0, lab.mar = 0.001, rm.axes = TRUE, by.row = TRUE, box = TRUE, pal = viridis, parallel = 10, collevels = seq(-140, 0, 5), path = data_path, img.prefix = "same.time", highlight = TRUE)
# create catalogs
catalog(X = high_snr, flim = c(0, 11), nrow = 6, ncol = 3, ovlp = 90, height = 15, width = 20, same.time.scale = TRUE, mar = 0.01, wl = 512, gr = FALSE, spec.mar = 0, lab.mar = 0.001, rm.axes = TRUE, by.row = TRUE, box = TRUE, pal = viridis, parallel = 10, collevels = seq(-140, 0, 5), path = data_path, img.prefix = "same.time", highlight = TRUE, alpha = 0.2)
source("~/Dropbox/R_package_testing/warbleR/R/catalog.R")
# Here include the path to the libraries for each author. This code will copy/update the library each time the Rmarkdown file is compiled
# Alternatively authors ca
personal_libraries <- c(author_1 = "/home/m/Documents/mendeley_libraries/ohun_paper.bib", author_2 = "/home/m/Documentos/mendeley_bibtex_files/ohun_paper.bib")
# location of current Rmarkdown
rmd_dir <- dirname(whereami::thisfile())
# github packages must include user name ("user/package")
# knitr is require for creating html/pdf/word reports
# kableExtra is used to print pretty formatted tables
# formatR is used for soft-wrapping code
# klippy is used for adding a copy button to each code block
pkgs <- c("kableExtra", "knitr", "rprojroot", "sciRmdTheme", "rmdwc", "whereami", "maRce10/ohun", "ggplot2", "viridis", "rmdwc", "RefManageR", "bibtex")
# install/ load packages
out <- lapply(pkgs, function(y) {
# get pakage name
pkg <- strsplit(y, "/")[[1]]
pkg <- pkg[length(pkg)]
# check if installed, if not then install
if (!pkg %in% installed.packages()[,"Package"])  {
if (grepl("/", y))  remotes::install_github(y, force = TRUE) else
install.packages(y)
}
# load package
a <- try(require(pkg, character.only = T), silent = T)
if (!a) remove.packages(pkg)
})
# Here include the path to the libraries for each author. This code will copy/update the library each time the Rmarkdown file is compiled
# Alternatively authors ca
personal_libraries <- c(author_1 = "/home/m/Documents/mendeley_libraries/ohun_paper.bib", author_2 = "/home/m/Documentos/mendeley_bibtex_files/ohun_paper.bib")
# location of current Rmarkdown
rmd_dir <- dirname(whereami::thisfile())
whereami::thisfile()
rmd_dir <- file.path(rootdir, "manuscript")
# set working directory as project directory or one directory above,
rootdir <- try(rprojroot::find_rstudio_root_file(), silent = TRUE)
rootdir
if (is(rootdir, "try-error")) rootdir <-  ".."
opts_knit$set(root.dir = rootdir)
# location of current Rmarkdown
rmd_dir <- dirname(whereami::thisfile())
is.null(rmd_dir)
whereami::thisfile()
rmd_dir <- file.path(rootdir, "manuscript")
rmd_dir
whereami::thisfile()
# read personal library
personal_libraries <- personal_libraries[file.exists(personal_libraries)]
personal_bib <- suppressMessages(ReadBib(personal_libraries))
# read paper's references.bib if it exists
if (file.exists(file.path(rootdir, "references.bib"))){
combined_bib <- suppressMessages(ReadBib(file.path(rmd_dir, "references.bib")))
merge_bib <- suppressMessages(merge(personal_bib, combined_bib, fields.to.check = "title", ignore.case = TRUE))
} else
merge_bib <- personal_bib
# github packages must include user name ("user/package")
# knitr is require for creating html/pdf/word reports
# kableExtra is used to print pretty formatted tables
# formatR is used for soft-wrapping code
# klippy is used for adding a copy button to each code block
pkgs <- c("kableExtra", "knitr", "rprojroot", "sciRmdTheme", "rmdwc", "whereami", "maRce10/ohun", "ggplot2", "viridis", "rmdwc", "RefManageR", "bibtex")
# install/ load packages
out <- lapply(pkgs, function(y) {
# get pakage name
pkg <- strsplit(y, "/")[[1]]
pkg <- pkg[length(pkg)]
# check if installed, if not then install
if (!pkg %in% installed.packages()[,"Package"])  {
if (grepl("/", y))  remotes::install_github(y, force = TRUE) else
install.packages(y)
}
# load package
a <- try(require(pkg, character.only = T), silent = T)
if (!a) remove.packages(pkg)
})
# read personal library
personal_libraries <- personal_libraries[file.exists(personal_libraries)]
personal_bib <- suppressMessages(ReadBib(personal_libraries))
personal_libraries
# Here include the path to the libraries for each author. This code will copy/update the library each time the Rmarkdown file is compiled
# Alternatively authors ca
personal_libraries <- c(author_1 = "/home/m/Documents/mendeley_libraries/ohun_paper.bib", author_2 = "/home/m/Documentos/mendeley_bibtex_files/ohun_paper.bib")
rmd_dir
# location of current Rmarkdown
if (!is.null(whereami::thisfile()))
rmd_dir <- dirname(whereami::thisfile()) else
rmd_dir <- NULL
if (is.null(rmd_dir)) rmd_dir <- file.path(rootdir, "manuscript")
# read personal library
personal_libraries <- personal_libraries[file.exists(personal_libraries)]
personal_bib <- suppressMessages(ReadBib(personal_libraries))
# read paper's references.bib if it exists
if (file.exists(file.path(rootdir, "references.bib"))){
combined_bib <- suppressMessages(ReadBib(file.path(rmd_dir, "references.bib")))
merge_bib <- suppressMessages(merge(personal_bib, combined_bib, fields.to.check = "title", ignore.case = TRUE))
} else
merge_bib <- personal_bib
personal_bib <- suppressMessages(ReadBib(personal_libraries))
personal_libraries
# read personal library
personal_libraries <- personal_libraries[file.exists(personal_libraries)]
personal_libraries
# Here include the path to the libraries for each author. This code will copy/update the library each time the Rmarkdown file is compiled
# Alternatively authors ca
personal_libraries <- c(author_1 = "/home/m/Documents/mendeley_libraries/ohun_paper.bib", author_2 = "/home/neuro/Documents/export.bib")
# location of current Rmarkdown
if (!is.null(whereami::thisfile()))
rmd_dir <- dirname(whereami::thisfile()) else
rmd_dir <- NULL
if (is.null(rmd_dir)) rmd_dir <- file.path(rootdir, "manuscript")
# read personal library
personal_libraries <- personal_libraries[file.exists(personal_libraries)]
personal_libraries
if (length(personal_libraries) > 0){
personal_bib <- suppressMessages(ReadBib(personal_libraries))
# read paper's references.bib if it exists
if (file.exists(file.path(rootdir, "references.bib"))){
combined_bib <- suppressMessages(ReadBib(file.path(rmd_dir, "references.bib")))
merge_bib <- suppressMessages(merge(personal_bib, combined_bib, fields.to.check = "title", ignore.case = TRUE))
} else
merge_bib <- personal_bib
# save combined references
WriteBib(bib = merge_bib, file = file.path(rmd_dir, "references.bib"), biblatex = TRUE)
}
# how to cite in Rmarkdown:
# https://rmarkdown.rstudio.com/authoring_bibliographies_and_citations.html
# find citation style files (csl) here:
# https://github.com/stackpr/csl-styles
# Here include the path to the libraries for each author. This code will copy/update the library each time the Rmarkdown file is compiled
# Alternatively authors ca
personal_libraries <- c(author_1 = "/home/m/Documents/mendeley_libraries/ohun_paper.bib", author_2 = "/home/neuro/Documents/export.bib")
# location of current Rmarkdown
if (!is.null(whereami::thisfile()))
rmd_dir <- dirname(whereami::thisfile()) else
rmd_dir <- NULL
if (is.null(rmd_dir)) rmd_dir <- file.path(rootdir, "manuscript")
# read personal library
personal_libraries <- personal_libraries[file.exists(personal_libraries)]
if (length(personal_libraries) > 0){
personal_bib <- suppressMessages(ReadBib(personal_libraries))
# read paper's references.bib if it exists
if (file.exists(file.path(rootdir, "references.bib"))){
combined_bib <- suppressMessages(ReadBib(file.path(rmd_dir, "references.bib")))
merge_bib <- suppressMessages(merge(personal_bib, combined_bib, fields.to.check = "title", ignore.case = TRUE))
} else
merge_bib <- personal_bib
# save combined references
WriteBib(bib = merge_bib, file = file.path(rmd_dir, "references.bib"), biblatex = TRUE)
}
# Here include the path to the libraries for each author. This code will copy/update the library each time the Rmarkdown file is compiled
# Alternatively authors ca
personal_libraries <- c(author_1 = "/home/m/Documents/mendeley_libraries/ohun_paper.bib", author_2 = "/home/neuro/Documents/export.bib")
# location of current Rmarkdown
if (!is.null(whereami::thisfile()))
rmd_dir <- dirname(whereami::thisfile()) else
rmd_dir <- NULL
if (is.null(rmd_dir)) rmd_dir <- file.path(rootdir, "manuscript")
# read personal library
personal_libraries <- personal_libraries[file.exists(personal_libraries)]
personal_libraries
personal_bib <- suppressMessages(ReadBib(personal_libraries))
personal_bib
grep("Odom", personal_bib)
personal_bib <- suppressMessages(ReadBib(personal_libraries))
qnorm(0.975)
library(HDInterval)
# github packages must include user name ("user/package")
# knitr is require for creating html/pdf/word reports
# kableExtra is used to print pretty formatted tables
# formatR is used for soft-wrapping code
# klippy is used for adding a copy button to each code block
pkgs <- c("kableExtra", "knitr", "rprojroot", "sciRmdTheme", "rmdwc", "whereami", "maRce10/ohun", "ggplot2", "viridis", "rmdwc", "RefManageR", "bibtex")
# install/ load packages
out <- lapply(pkgs, function(y) {
# get pakage name
pkg <- strsplit(y, "/")[[1]]
pkg <- pkg[length(pkg)]
# check if installed, if not then install
if (!pkg %in% installed.packages()[,"Package"])  {
if (grepl("/", y))  remotes::install_github(y, force = TRUE) else
install.packages(y)
}
# load package
a <- try(require(pkg, character.only = T), silent = T)
if (!a) remove.packages(pkg)
})
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
