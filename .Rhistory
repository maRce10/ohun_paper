max.duration = ceiling(seq(max_dur/2, max_dur, length.out = 5)),
# thinning = seq(0.75, 1, 0.25),
parallel = cores,
bp = bp,
previous.output = opt_det,
path = raw_data_path
)
best_param <- opt_det2[which.max(opt_det2$f1.score), ]
opt_det_all2 <- energy_detector(
files = unique(mnl_sel_tbl$sound.files),
threshold = best_param$threshold,
hop.size = 11.6,
smooth = best_param$smooth,
hold.time = best_param$hold.time,
min.duration = best_param$min.duration,
max.duration = best_param$max.duration,
thinning = best_param$thinning,
parallel = 10,
bp = bp,
path = raw_data_path
)
dd <- diagnose_detection(reference = mnl_sel_tbl, detection = opt_det_all2, by.sound.file = T)
summarize_diagnostic(dd)
manual_ref <- read.csv(file.path(preproc_path, "manual_selections_Taeniopygia.csv"))
train_ref <- manual_ref[manual_ref$sound.files %in% train_files, ]
train_files <- c(
"BRN7_43435.27985312_12_1_7_46_25.wav",
"db1_43427.28100313_11_23_7_48_20.wav",
"Gry35HP_43455.29800260_12_21_8_16_40.wav"
)
train_ref <- manual_ref[manual_ref$sound.files %in% train_files, ]
test_files <- setdiff(unique(manual_ref$sound.files), train_files)
test_files
test_files <- setdiff((manual_ref$sound.files), train_files)
test_files
test_files <- setdiff(manual_ref$sound.files, train_files)
test_ref <- manual_ref[manual_ref$sound.files %in% test_files, ]
opt_det2 <- optimize_energy_detector(
reference = test_ref,
files = test_files,
threshold = c(1),
hop.size = 11.6,
smooth = 5,
hold.time = c(0, 5),
min.duration = floor(seq(min_dur/2, min_dur * 3, length.out = 5)),
max.duration = ceiling(seq(max_dur/2, max_dur, length.out = 5)),
# thinning = seq(0.75, 1, 0.25),
parallel = cores,
bp = bp,
previous.output = opt_det,
path = raw_data_path
)
opt_det_all2 <- energy_detector(
files = test_files,
threshold = best_param$threshold,
hop.size = 11.6,
smooth = best_param$smooth,
hold.time = best_param$hold.time,
min.duration = best_param$min.duration,
max.duration = best_param$max.duration,
thinning = best_param$thinning,
parallel = 10,
bp = bp,
path = raw_data_path
)
dd <- diagnose_detection(reference = test_ref, detection = opt_det_all2, by.sound.file = T)
summarize_diagnostic(dd)
diagnose_detection(reference = test_ref, detection = opt_det_all2, by.sound.file = FALSE)
floor(seq(min_dur/2, min_dur * 3, length.out = 5))
best_param
opt_det2 <- optimize_energy_detector(
reference = train_ref,
files = train_files,
threshold = c(1, 5),
hop.size = 11.6,
smooth = 5,
hold.time = c(0, 5),
min.duration = (seq(min_dur/2, min_dur * 3, length.out = 5)),
max.duration = (seq(max_dur/2, max_dur, length.out = 5)),
# thinning = seq(0.75, 1, 0.25),
parallel = cores,
bp = bp,
previous.output = opt_det,
path = raw_data_path
)
best_param <- opt_det2[which.max(opt_det2$f1.score), ]
opt_det_all2 <- energy_detector(
files = test_files,
threshold = best_param$threshold,
hop.size = 11.6,
smooth = best_param$smooth,
hold.time = best_param$hold.time,
min.duration = best_param$min.duration,
max.duration = best_param$max.duration,
thinning = best_param$thinning,
parallel = 10,
bp = bp,
path = raw_data_path
)
diagnose_detection(reference = test_ref, detection = opt_det_all2, by.sound.file = FALSE)
best_param
seq(min_dur/2, min_dur * 3, length.out = 5)
min_dur
seq(min_dur/2, min_dur * 3, length.out = 5)
seq(max_dur/2, max_dur, length.out = 5)
opt_det2 <- optimize_energy_detector(
reference = train_ref,
files = train_files,
threshold = c(1, 5),
hop.size = 11.6,
smooth = 5,
hold.time = c(0, 5),
min.duration = c(5, 15, 25),
# min.duration = seq(min_dur/2, min_dur * 3, length.out = 5),
# max.duration = seq(max_dur/2, max_dur, length.out = 5),
max.duration = (275, 300, 325),
parallel = cores,
bp = bp,
previous.output = opt_det,
path = raw_data_path
)
opt_det2 <- optimize_energy_detector(
reference = train_ref,
files = train_files,
threshold = c(1, 5),
hop.size = 11.6,
smooth = 5,
hold.time = c(0, 5),
min.duration = c(5, 15, 25),
# min.duration = seq(min_dur/2, min_dur * 3, length.out = 5),
# max.duration = seq(max_dur/2, max_dur, length.out = 5),
max.duration = c(275, 300, 325),
parallel = cores,
bp = bp,
previous.output = opt_det,
path = raw_data_path
)
best_param <- opt_det2[which.max(opt_det2$f1.score), ]
opt_det_all2 <- energy_detector(
files = test_files,
threshold = best_param$threshold,
hop.size = 11.6,
smooth = best_param$smooth,
hold.time = best_param$hold.time,
min.duration = best_param$min.duration,
max.duration = best_param$max.duration,
thinning = best_param$thinning,
parallel = 10,
bp = bp,
path = raw_data_path
)
diagnose_detection(reference = test_ref, detection = opt_det_all2, by.sound.file = FALSE)
list.files(path = raw_data_path)
list.files(path = raw_data_path, pattern = ".wav")
list.files(path = raw_data_path, pattern = ".txt")
sfs <- list.files(path = raw_data_path, pattern = ".wav")
sfs[sfs %in% manual_ref]
sfs[sfs %in% manual_ref$sound.files]
sfs[!sfs %in% manual_ref$sound.files]
unlink(file.path(raw_data_path, sfs[!sfs %in% manual_ref$sound.files]))
sfs <- list.files(path = raw_data_path, pattern = ".wav")
sfs
opt_det <- optimize_energy_detector(
reference = train_ref,
files = train_files,
threshold = c(1, 5),
hop.size = 11.6,
smooth = 5,
hold.time = c(0, 5),
min.duration = c(5, 15, 25),
max.duration = c(275, 300, 325),
parallel = cores,
bp = bp,
previous.output = opt_det,
path = raw_data_path
)
best_param <- opt_det[which.max(opt_det$f1.score), ]
opt_det_all2 <- energy_detector(
files = test_files,
threshold = best_param$threshold,
hop.size = 11.6,
smooth = best_param$smooth,
hold.time = best_param$hold.time,
min.duration = best_param$min.duration,
max.duration = best_param$max.duration,
thinning = best_param$thinning,
parallel = 10,
bp = bp,
path = raw_data_path
)
opt_det <- optimize_energy_detector(
reference = train_ref,
files = train_files,
threshold = c(1, 5),
hop.size = 11.6,
smooth = c(5, 10),
hold.time = c(0, 5),
min.duration = c(5, 15, 25),
max.duration = c(275, 300, 325),
parallel = cores,
bp = bp,
previous.output = opt_det,
path = raw_data_path
)
best_param <- opt_det[which.max(opt_det$f1.score), ]
opt_det_all <- energy_detector(
files = test_files,
threshold = best_param$threshold,
hop.size = 11.6,
smooth = best_param$smooth,
hold.time = best_param$hold.time,
min.duration = best_param$min.duration,
max.duration = best_param$max.duration,
thinning = best_param$thinning,
parallel = 10,
bp = bp,
path = raw_data_path
)
diagnose_detection(reference = test_ref, detection = opt_det_all, by.sound.file = FALSE)
## add 'developer/' to packages to be installed from github
x <- c("remotes", "maRce10/warbleR", "bioacoustics", "viridis", "ggplot2", "maRce10/ohun", "DT")
aa <- lapply(x, function(y) {
# get pakage name
pkg <- strsplit(y, "/")[[1]]
pkg <- pkg[length(pkg)]
# check if installed, if not then install
if (!pkg %in% installed.packages()[,"Package"])  {
if (grepl("/", y))  remotes::install_github(y, force = TRUE) else
install.packages(y)
}
# load package
try(require(pkg, character.only = T), silent = T)
})
fixed_calls <- read.csv( "./data/processed/manually_fixed_call_detections.csv")
table(fixed_calls)
table(fixed_calls$detection)
getwd*
getwd()
fixed_calls <- read.csv( "./data/processed/manually_fixed_call_detections.csv")
# read data
reference <- read.csv("./data/raw/thyroptera/manual_annotations_thyroptera.csv", stringsAsFactors = FALSE)
head(manual_annotations_thyroptera.csv)
table(reference$sound.files)
length(unique(reference$sound.files))
3/18
30*0.16
5
write.csv(opt_det, file.path(preproc_path, "detection_optimization.csv"), row.names = FALSE)
opt_det_all <- energy_detector(
files = test_files,
threshold = best_param$threshold,
hop.size = 11.6,
smooth = best_param$smooth,
hold.time = best_param$hold.time,
min.duration = best_param$min.duration,
max.duration = best_param$max.duration,
thinning = best_param$thinning,
parallel = 10,
bp = bp,
path = raw_data_path
)
diagnose_detection(reference = test_ref, detection = opt_det_all, by.sound.file = FALSE)
bp
nrow(opt_det)
opt_det2 <- optimize_energy_detector(
reference = train_ref,
files = train_files,
threshold = c(1, 5),
hop.size = 11.6,
smooth = c(5, 10),
hold.time = c(0, 5),
min.duration = c(5, 15, 25),
max.duration = c(275, 300, 325),
parallel = cores,
bp = c(0.5, 10),
# previous.output = opt_det,
path = raw_data_path
)
best_param <- opt_det2[which.max(opt_det2$f1.score), ]
opt_det_all <- energy_detector(
files = test_files,
threshold = best_param$threshold,
hop.size = 11.6,
smooth = best_param$smooth,
hold.time = best_param$hold.time,
min.duration = best_param$min.duration,
max.duration = best_param$max.duration,
thinning = best_param$thinning,
parallel = 10,
bp = c(0.5, 10),
path = raw_data_path
)
diagnose_detection(reference = test_ref, detection = opt_det_all, by.sound.file = FALSE)
nrow(opt_det2)
opt_det <- opt_det22
opt_det <- opt_det2
write.csv(opt_det, file.path(preproc_path, "detection_optimization.csv"), row.names = FALSE)
# read data
reference <- read.csv("./data/raw/thyroptera/manual_annotations_thyroptera.csv", stringsAsFactors = FALSE)
manual_ref$sound.files
unique(manual_ref$sound.files)
# read data
manual_ref <- read.csv("./data/raw/thyroptera/manual_annotations_thyroptera.csv", stringsAsFactors = FALSE)
# read data
manual_ref <- read.csv("./data/raw/thyroptera/manual_annotations_thyroptera.csv", stringsAsFactors = FALSE)
manual_ref$sound.files
unique(manual_ref$sound.files)
3/18*30
train_files <- c(
"ch1MPI2020-01-17_08-44-19_0000028.wav",
"ch1MPI2020-01-23_10-30-35_0000106.wav",
"ch1MPI_2020-01-30_15-06-38_0000193.wav",
"ch1MPI2020-01-16_11-46-10_0000018.wav",
"ch1MPI2020-01-16_13-40-58_0000019.wav",
"ch1MPI2020-01-24_11-28-15_0000124.wav"
)
test_files <- setdiff(manual_ref$sound.files, train_files)
train_ref <- manual_ref[manual_ref$sound.files %in% train_files, ]
test_ref <- manual_ref[manual_ref$sound.files %in% test_files, ]
data_path <- "./data/raw/thyroptera/"
# find templates
templates <- get_templates(train_ref, path = data_path,  bp = c(10, 50), fast = TRUE, ovlp = 70, wl = 200, n.templates = 3)
# create ext. selection table
templates_est <- selection_table(templates, extended = TRUE, confirm.extended = FALSE, path = data_path)
templates_est <- rename_est_waves(templates_est, new.sound.files = templates$distance.quantile)
paral <- 10
corr_templ <- template_correlator(templates = templates_est,
path = data_path, parallel = paral, hop.size = 10, ovlp = 70)
optimize_fourier_detec <- optimize_template_detector(reference = train_ref, template.correlations = corr_templ,
threshold = seq(0.05, 0.5, 0.01), parallel = 10, by.sound.file = TRUE, pb = TRUE)
optimize_fourier_detec$templates <- gsub("-1", "", optimize_fourier_detec$templates)
sd_tab <- summarize_diagnostic(optimize_fourier_detec, time.diagnostics = FALSE)
View(sd_tab)
templates
templates_est
corr_templ
corr_templ <- template_correlator(templates = templates_est,
path = data_path, files = unique(train_ref$sound.files), parallel = paral, hop.size = 10, ovlp = 70)
source("~/Dropbox/R_package_testing/ohun/R/optimize_template_detector.R")
optimize_fourier_detec <- optimize_template_detector(reference = train_ref, template.correlations = corr_templ,
threshold = seq(0.05, 0.5, 0.01), parallel = 10, by.sound.file = TRUE, pb = TRUE)
optimize_fourier_detec$templates <- gsub("-1", "", optimize_fourier_detec$templates)
sd_tab <- summarize_diagnostic(optimize_fourier_detec, time.diagnostics = FALSE)
View(sd_tab)
agg_sd <- aggregate(cbind(recall, precision, f1.score) ~ threshold + templates, data = sd_tab,
mean)
ggplot(agg_sd, aes(x = threshold, y = recall, group = templates, color = templates)) +
geom_line() + geom_point() + scale_color_viridis_d(end = 1) + theme_classic()
ggplot(agg_sd, aes(x = threshold, y = precision, group = templates, color = templates)) +
geom_line() + geom_point() + scale_color_viridis_d(end = 1) + theme_classic()
ggplot(agg_sd, aes(x = threshold, y = f1.score, group = templates, color = templates)) +
geom_line() + geom_point() + scale_color_viridis_d(end = 1) + theme_classic()
ggplot(agg_sd, aes(y = recall, x = precision, group = templates, color = templates)) +
geom_line() + geom_point() + scale_color_viridis_d(end = 1) + theme_classic()
# find templates
templates <- get_templates(train_ref, path = data_path,  bp = c(10, 50), fast = TRUE, ovlp = 70, wl = 200, n.templates = 4)
# create ext. selection table
templates_est <- selection_table(templates, extended = TRUE, confirm.extended = FALSE, path = data_path)
templates_est <- rename_est_waves(templates_est, new.sound.files = templates$distance.quantile)
paral <- 10
corr_templ <- template_correlator(templates = templates_est,
path = data_path, files = unique(train_ref$sound.files), parallel = paral, hop.size = 10, ovlp = 70)
optimize_fourier_detec <- optimize_template_detector(reference = train_ref, template.correlations = corr_templ,
threshold = seq(0.05, 0.5, 0.01), parallel = 10, by.sound.file = TRUE, pb = TRUE)
optimize_fourier_detec$templates <- gsub("-1", "", optimize_fourier_detec$templates)
sd_tab <- summarize_diagnostic(optimize_fourier_detec, time.diagnostics = FALSE)
agg_sd <- aggregate(cbind(recall, precision, f1.score) ~ threshold + templates, data = sd_tab,
mean)
ggplot(agg_sd, aes(x = threshold, y = recall, group = templates, color = templates)) +
geom_line() + geom_point() + scale_color_viridis_d(end = 1) + theme_classic()
ggplot(agg_sd, aes(x = threshold, y = precision, group = templates, color = templates)) +
geom_line() + geom_point() + scale_color_viridis_d(end = 1) + theme_classic()
ggplot(agg_sd, aes(x = threshold, y = f1.score, group = templates, color = templates)) +
geom_line() + geom_point() + scale_color_viridis_d(end = 1) + theme_classic()
ggplot(agg_sd, aes(y = recall, x = precision, group = templates, color = templates)) +
geom_line() + geom_point() + scale_color_viridis_d(end = 1) + theme_classic()
View(sd_tab)
templates_est$sound.files
templates_est[templates_est$sound.file "50%", ]
templates_est[templates_est$sound.file == "50%", ]
corr_templ <- template_correlator(
templates = templates_est[templates_est$sound.file == "50%", ],
path = data_path, files = unique(test_ref$sound.files),
parallel = paral,
hop.size = 10,
ovlp = 70
)
corr_templ_test <- template_correlator(
templates = templates_est[templates_est$sound.file == "50%", ],
path = data_path, files = unique(test_ref$sound.files),
parallel = paral,
hop.size = 10,
ovlp = 70
)
which.max(optimize_fourier_detec$f1.score)
which(which.max(optimize_fourier_detec$f1.score)
which(which.max(optimize_fourier_detec$f1.score))
which(which.max(optimize_fourier_detec$f1.score))
which(which.max(optimize_fourier_detec$f1.score))
opt_50 <- optimize_fourier_detec[optimize_fourier_detec$templates == "50%", ]
opt_thresh <- opt_50$threshold[which.max(opt_50$f1.score)]
optimize_fourier_detec <- template_detector(
template.correlations = corr_templ_test,
threshold = opt_thresh, parallel = 10)
detec_test <- template_detector(
template.correlations = corr_templ_test,
threshold = opt_thresh, parallel = 10)
diagnose_detection(reference = test_ref, detection = detec_test)
opt_thresh
# find templates
templates <- get_templates(train_ref, path = data_path,  bp = c(10, 50), fast = TRUE, ovlp = 70, wl = 200, n.templates = 4)
# label templates
# templates$template.type <- c("sd_below_pc1_indx", "pc1_mean", "sd_above_pc1_indx")
# create ext. selection table
templates_est <- selection_table(templates, extended = TRUE, confirm.extended = FALSE, path = data_path)
templates_est <- rename_est_waves(templates_est, new.sound.files = templates$distance.quantile)
saveRDS(templates_est, "./data/processed/templates_thyroptera_est.RDS")
corr_templ_train <- template_correlator(templates = templates_est,
path = data_path, files = unique(train_ref$sound.files), parallel = paral, hop.size = 10, ovlp = 70)
opt_detec_train <- optimize_template_detector(
reference = train_ref,
template.correlations = corr_templ_train,
threshold = seq(0.05, 0.5, 0.01), parallel = 10, by.sound.file = TRUE, pb = TRUE)
opt_detec_train$templates <- gsub("-1", "", opt_detec_train$templates)
saveRDS(opt_detec_train, "./data/processed/optimization_results_3_templates_thyroptera.RDS")
opt_detec_train <- readRDS("./data/processed/optimization_results_3_templates_thyroptera.RDS")
sd_tab <- summarize_diagnostic(opt_detec_train, time.diagnostics = FALSE)
agg_sd <- aggregate(cbind(recall, precision) ~ threshold + templates, data = sd_tab,
mean)
ggplot(agg_sd, aes(x = recall, y = precision, group = templates, color = templates)) +
geom_line() + geom_point() + scale_color_viridis_d(end = 1) + theme_classic()
detec_test
opt_thresh <- opt_50$threshold[which.max(opt_50$recall)]
# detect on test files
detec_test <- template_detector(
template.correlations = corr_templ_test,
threshold = opt_thresh
)
diagnose_detection(reference = test_ref, detection = detec_test)
detec_test <- readRDS("./data/processed/detection_thyroptera_all.RDS")
opt_thresh <- opt_50$threshold[which.max(opt_50$f1.score)]
# detect on test files
detec_test <- template_detector(
template.correlations = corr_templ_test,
threshold = opt_thresh
)
saveRDS(detec_test, "./data/processed/detection_thyroptera_all.RDS")
diagnose_detection(reference = test_ref, detection = detec_test)
agg_sd <- aggregate(cbind(recall, precision) ~ threshold + templates, data = opt_detec_train,
mean)
ggplot(agg_sd, aes(x = recall, y = precision, group = templates, color = templates)) +
geom_line() + geom_point() + scale_color_viridis_d(end = 1) + theme_classic()
head(diag_train)
head(diag_train)
head(opt_detec_train)
# subset with highest performance
sub_diag_train <-diag_train[order(diag_train$f1.score, decreasing = TRUE), ]
opt_detec_train <- readRDS("./data/processed/optimization_results_3_templates_thyroptera.RDS")
diag_train <- summarize_diagnostic(opt_detec_train, time.diagnostics = FALSE)
head(diag_train)
warbleR_options(wav.path = "./data/raw/thyroptera/", wl = 300, parallel = 1, bp = "frange", fast = F, threshold = 15, ovlp = 20)
manual_ref <- read.csv(file.path(data_path, "manual_annotations_thyroptera.csv"), stringsAsFactors = FALSE)
# select highest signal to noise ratio calls per individual
manual_ref_snr <- signal_2_noise(X = manual_ref, mar = 0.05)
# select 1 example per sound file
high_snr <- manual_ref_snr[ave(-manual_ref_snr$SNR, manual_ref_snr$sound.files, FUN = rank) <= 1, ]
View(high_snr)
feature_reference(manual_ref_snr)
catalog(X = high_snr, flim = c(10, 45), nrow = 6, ncol = 5, ovlp = 70, height = 15, width = 23, same.time.scale = TRUE, mar = 0.005, wl = 512, gr = FALSE, spec.mar = 0.4, lab.mar = 0.8, rm.axes = TRUE, by.row = TRUE, box = TRUE, labels = c("sf.abbr", "selec"), fast.spec = TRUE, pal = viridis, parallel = 10)
# create catalogs
catalog(X = high_snr, flim = c(10, 45), nrow = 6, ncol = 5, ovlp = 70, height = 15, width = 23, same.time.scale = TRUE, mar = 0.005, wl = 512, gr = FALSE, spec.mar = 0.4, lab.mar = 0.8, rm.axes = TRUE, by.row = TRUE, box = TRUE, fast.spec = TRUE, pal = viridis, parallel = 10)
# create catalogs
catalog(X = high_snr, flim = c(10, 45), nrow = 6, ncol = 5, ovlp = 70, height = 15, width = 23, same.time.scale = TRUE, mar = 0.005, wl = 512, gr = FALSE, spec.mar = 0.4, lab.mar = 0.8, rm.axes = TRUE, by.row = TRUE, box = TRUE, pal = viridis, parallel = 10)
# create catalogs
catalog(X = high_snr, flim = c(10, 45), nrow = 6, ncol = 5, ovlp = 90, height = 15, width = 20, same.time.scale = TRUE, mar = 0.005, wl = 512, gr = FALSE, spec.mar = 0.4, lab.mar = 0.8, rm.axes = TRUE, by.row = TRUE, box = TRUE, pal = viridis, parallel = 10)
# create catalogs
catalog(X = high_snr, flim = c(10, 45), nrow = 6, ncol = 5, ovlp = 90, height = 15, width = 20, same.time.scale = TRUE, mar = 0.005, wl = 512, gr = FALSE, spec.mar = 0.4, lab.mar = 0.8, rm.axes = TRUE, by.row = TRUE, box = TRUE, pal = viridis, parallel = 10, collevels = seq(-100, 0, 5))
file.path(data_path, "Catalog_p1.jpeg")
normalizePath(file.path(data_path,)
)
normalizePath(data_path)
templates_est
# create catalogs
catalog(X = templates_est, flim = c(10, 45), nrow = 2, ncol = 3, ovlp = 90, height = 15, width = 20, same.time.scale = TRUE, mar = 0.005, wl = 512, gr = FALSE, spec.mar = 0.4, lab.mar = 0.8, rm.axes = TRUE, by.row = TRUE, box = TRUE, pal = viridis, parallel = 10, collevels = seq(-100, 0, 5), img.prefix = "templates")
# create catalogs
catalog(X = templates_est, flim = c(10, 45), nrow = 2, ncol = 2, ovlp = 90, height = 15, width = 15, same.time.scale = TRUE, mar = 0.005, wl = 512, gr = FALSE, spec.mar = 0.4, lab.mar = 0.8, rm.axes = TRUE, by.row = TRUE, box = TRUE, pal = viridis, parallel = 10, collevels = seq(-100, 0, 5), img.prefix = "templates")
# create catalogs
catalog(X = templates_est, flim = c(10, 45), nrow = 2, ncol = 2, ovlp = 90, height = 10, width = 15, same.time.scale = TRUE, mar = 0.005, wl = 512, gr = FALSE, spec.mar = 0.4, lab.mar = 0.8, rm.axes = TRUE, by.row = TRUE, box = TRUE, pal = viridis, parallel = 10, collevels = seq(-100, 0, 5), img.prefix = "templates")
manual_ref <- read.csv(file.path(data_path, "manual_selections_Taeniopygia.csv"))
manual_ref <- read.csv(file.path("data/processed/taeniopygia", "manual_selections_Taeniopygia.csv"))
# select highest signal to noise ratio calls per individual
manual_ref_snr <- signal_2_noise(X = manual_ref, mar = 0.05)
data_path <- raw_data_path <- "data/raw/taeniopygia"
# select highest signal to noise ratio calls per individual
manual_ref_snr <- signal_2_noise(X = manual_ref, mar = 0.05, path = data_path)
# select 1 example per sound file
high_snr <- manual_ref_snr[ave(-manual_ref_snr$SNR, manual_ref_snr$sound.files, FUN = rank) <= 1, ]
data_path
# create catalogs
catalog(X = high_snr, flim = c(10, 45), nrow = 6, ncol = 3, ovlp = 90, height = 15, width = 20, same.time.scale = TRUE, mar = 0.005, wl = 512, gr = FALSE, spec.mar = 0.4, lab.mar = 0.8, rm.axes = TRUE, by.row = TRUE, box = TRUE, pal = viridis, parallel = 10, collevels = seq(-100, 0, 5), path = data_path)
feature_reference(manual_ref)
# create catalogs
catalog(X = high_snr, flim = c(0, 11), nrow = 6, ncol = 3, ovlp = 90, height = 15, width = 20, same.time.scale = TRUE, mar = 0.005, wl = 512, gr = FALSE, spec.mar = 0.4, lab.mar = 0.8, rm.axes = TRUE, by.row = TRUE, box = TRUE, pal = viridis, parallel = 10, collevels = seq(-100, 0, 5), path = data_path)
# create catalogs
catalog(X = high_snr, flim = c(0, 11), nrow = 6, ncol = 3, ovlp = 90, height = 15, width = 20, same.time.scale = FALSE, mar = 0.005, wl = 512, gr = FALSE, spec.mar = 0.4, lab.mar = 0.8, rm.axes = TRUE, by.row = TRUE, box = TRUE, pal = viridis, parallel = 10, collevels = seq(-100, 0, 5), path = data_path)
# create catalogs
catalog(X = high_snr, flim = c(0, 11), nrow = 6, ncol = 3, ovlp = 90, height = 15, width = 20, same.time.scale = FALSE, mar = 0.05, wl = 512, gr = FALSE, spec.mar = 0.4, lab.mar = 0.8, rm.axes = TRUE, by.row = TRUE, box = TRUE, pal = viridis, parallel = 10, collevels = seq(-100, 0, 5), path = data_path)
# create catalogs
catalog(X = high_snr, flim = c(0, 11), nrow = 6, ncol = 3, ovlp = 90, height = 15, width = 20, same.time.scale = FALSE, mar = 0.01, wl = 512, gr = FALSE, spec.mar = 0.4, lab.mar = 0.8, rm.axes = TRUE, by.row = TRUE, box = TRUE, pal = viridis, parallel = 10, collevels = seq(-100, 0, 5), path = data_path)
# subset with highest performance
sub_opt_det <- opt_det[order(opt_det$f1.score, decreasing = TRUE), ]
View(sub_opt_det)
