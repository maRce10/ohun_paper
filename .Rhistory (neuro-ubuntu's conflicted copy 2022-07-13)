pca <- prcomp(spectral_parameters[, 2:27], scale. = TRUE)
# get variance by PC
variance_pca <- summary(pca)$importance
# number of PCs to keep
pcs_keep <- sum(variance_pca[3, ] <= variance.cutoff) + 1
# print info
crayon::silver(paste0(pcs_keep, " principal components were kept which explained ", round(variance_pca[3, pcs_keep], 2), " of the variance"))
# keep those as acoustic space
acoustic.space <- pca$x[, 1:pcs_keep]
}
# get centroid
centroid_coors <- colMeans(acoustic.space)
# and istance to centroid
dists_to_centroid <- unlist(warbleR:::pblapply_wrblr_int(pbar = FALSE, 1:nrow(acoustic.space), function(x)
dist(rbind(acoustic.space[x, ], centroid_coors))))
dist_quantiles <- stats::quantile(x = dists_to_centroid, probs = seq(0, 1, length.out = n.templates + 1)[1:(n.templates)], digits = 1)
template_indx <-
sapply(dist_quantiles, function(x)  which.min(abs(dists_to_centroid - x)))
templates <- reference[template_indx, ]
templates$distance.quantile <- names(template_indx)
return(templates)
}
# find templates
templates <- get_templates(reference, path = .Options$warbleR$path,  bp = c(10, 50), fast = TRUE, ovlp = 70, wl = 200, n.templates = 2)
templates
templates <- get_templates(reference, path = .Options$warbleR$path,  bp = c(10, 50), fast = TRUE, ovlp = 70, wl = 200, n.templates = 4)
# label templates
# templates$template.type <- c("sd_below_pc1_indx", "pc1_mean", "sd_above_pc1_indx")
# create ext. selection table
templates_est <- selection_table(templates, extended = TRUE, confirm.extended = FALSE)
templates_est <- rename_est_waves(templates_est, new.sound.files = templates$distance.quantile)
saveRDS(templates_est, "./data/processed/templates_thyroptera_est.RDS")
```
```{r, eval = FALSE, echo = TRUE}
templates_est <- readRDS("./data/processed/templates_thyroptera_est.RDS")
paral <- 1
# use mean peak freq sels as template, fourier spectrograms
corr_templ <- template_correlator(templates = templates_est,
path = .Options$warbleR$path, parallel = paral, hop.size = 10, ovlp = 70)
saveRDS(corr_templ, "./data/processed/template_correlations_3_templates_thyroptera.RDS")
optimize_fourier_detec <- optimize_template_detector(reference = reference, template.correlations = corr_templ,
threshold = seq(0.05, 0.5, 0.01), parallel = 1, by.sound.file = TRUE, pb = TRUE)
saveRDS(optimize_fourier_detec, "./data/processed/optimization_results_3_templates_thyroptera.RDS")
templates <- get_templates(reference, path = .Options$warbleR$path,  bp = c(10, 50), fast = TRUE, ovlp = 70, wl = 200, n.templates = 4, variance.cutoff = 0.3)
# label templates
# templates$template.type <- c("sd_below_pc1_indx", "pc1_mean", "sd_above_pc1_indx")
# create ext. selection table
templates_est <- selection_table(templates, extended = TRUE, confirm.extended = FALSE)
templates_est <- rename_est_waves(templates_est, new.sound.files = templates$distance.quantile)
saveRDS(templates_est, "./data/processed/templates_thyroptera_est.RDS")
templates_est <- readRDS("./data/processed/templates_thyroptera_est.RDS")
paral <- 1
# use mean peak freq sels as template, fourier spectrograms
corr_templ <- template_correlator(templates = templates_est,
path = .Options$warbleR$path, parallel = paral, hop.size = 10, ovlp = 70)
saveRDS(corr_templ, "./data/processed/template_correlations_3_templates_thyroptera.RDS")
corr_templ <- readRDS("./data/processed/template_correlations_3_templates_thyroptera.RDS")
optimize_fourier_detec <- optimize_template_detector(reference = reference, template.correlations = corr_templ,
threshold = seq(0.05, 0.5, 0.01), parallel = 1, by.sound.file = TRUE, pb = TRUE)
saveRDS(optimize_fourier_detec, "./data/processed/optimization_results_3_templates_thyroptera.RDS")
# find templates
templates <- get_templates(reference, path = .Options$warbleR$path,  bp = c(10, 50), fast = TRUE, ovlp = 70, wl = 200, n.templates = 3)
# label templates
# templates$template.type <- c("sd_below_pc1_indx", "pc1_mean", "sd_above_pc1_indx")
# create ext. selection table
templates_est <- selection_table(templates, extended = TRUE, confirm.extended = FALSE)
templates_est <- rename_est_waves(templates_est, new.sound.files = templates$distance.quantile)
saveRDS(templates_est, "./data/processed/templates_thyroptera_est.RDS")
templates_est <- readRDS("./data/processed/templates_thyroptera_est.RDS")
paral <- 1
# use mean peak freq sels as template, fourier spectrograms
corr_templ <- template_correlator(templates = templates_est,
path = .Options$warbleR$path, parallel = paral, hop.size = 10, ovlp = 70)
saveRDS(corr_templ, "./data/processed/template_correlations_3_templates_thyroptera.RDS")
templates_est <- readRDS("./data/processed/templates_thyroptera_est.RDS")
paral <- 1
# use mean peak freq sels as template, fourier spectrograms
corr_templ <- template_correlator(templates = templates_est,
path = .Options$warbleR$path, parallel = paral, hop.size = 10, ovlp = 70)
saveRDS(corr_templ, "./data/processed/template_correlations_3_templates_thyroptera.RDS")
corr_templ <- readRDS("./data/processed/template_correlations_3_templates_thyroptera.RDS")
optimize_fourier_detec <- optimize_template_detector(reference = reference, template.correlations = corr_templ,
threshold = seq(0.05, 0.5, 0.01), parallel = 1, by.sound.file = TRUE, pb = TRUE)
saveRDS(optimize_fourier_detec, "./data/processed/optimization_results_3_templates_thyroptera.RDS")
x <- c("tidyverse", "ohun", "Rraven", "warbleR", "pbapply", "remotes")
out <- lapply(x, function(y) {
# check if installed, if not then install
if (!y %in% installed.packages()[,"Package"])
install.packages(y)
# load package
try(require(y, character.only = T), silent = T)
})
# remotes::install_github("marce10/ohun")
raw_data_path <- "data/raw/taeniopygia"
preproc_path <- "data/processed/taeniopygia"
figure_path <- "data/processed/taeniopygia/figures"
cores <- parallel::detectCores() - 2
seed <- 489
est <- readRDS(file.path(preproc_path, "manual_selections_Taeniopygia_est.RDS"))
glimpse(est)
mnl_sel_tbl <- read.csv(file.path(preproc_path, "manual_selections_Taeniopygia.csv"))
glimpse(mnl_sel_tbl)
# I get an error when using the EST: "# Error in warbleR::gaps(X = reference, pb = FALSE) :
# extended selection tables must be created 'by.song' to be used in song.param()"
feat_ref <- ohun::feature_reference(est, by.sound.file = FALSE)
feat_ref <- ohun::feature_reference(mnl_sel_tbl, by.sound.file = FALSE)
is(mnl_sel_tbl, "extended_selection_table")
mnl_sel_tbl
is(mnl_sel_tbl, extended_selection_table)
is(est, "extended_selection_table")
feat_ref <- ohun::feature_reference(mnl_sel_tbl, by.sound.file = FALSE)
# Min and max duration of the manual selections
# Use these for automated detection but convert to milliseconds
min_dur <- floor(feat_ref[["sel.duration", "min"]] * 1000)
max_dur <- ceiling(feat_ref[["sel.duration", "max"]] * 1000)
min_gap <- floor(feat_ref[["gap.duration", "min"]] * 1000)
bp <- c(feat_ref[["bottom.freq", "min"]], feat_ref[["top.freq", "max"]])
min_dur
max_dur
min_gap
bp
wav
ref_tbl <- mnl_sel_tbl %>%
dplyr::filter(sound.files %in% wavs)
install.packages("sketchy")
library(sketchy)
remove.packages("ohun")
remotes::install_github("maRce10/ohun")
normalizePath("./data/raw/thyroptera/Catalog_p1.jpeg")
getwd()
file.path(data_path, "Catalog_p1.jpeg")
normalizePath("./data/raw/thyroptera/Catalog_p1.jpeg")
# load packages
X <- c("plyr", "tidyverse", "data.table", "warbleR", "tuneR", "pbapply")
invisible(lapply(X, library, character.only = TRUE))
install.packages("dplyr")
# load packages
X <- c("plyr", "tidyverse", "data.table", "warbleR", "tuneR", "pbapply")
invisible(lapply(X, library, character.only = TRUE))
install.packages("plyr")
packrat::off()
# load packages
X <- c("plyr", "tidyverse", "data.table", "warbleR", "tuneR", "pbapply")
invisible(lapply(X, library, character.only = TRUE))
# make list of selection tables in file path
x <- ldply(list.files(path = args[1], pattern = "^automatic_detections*", full.names = TRUE), read.csv, header = TRUE)
# load arguments from sbatch
# args = commandArgs(trailingOnly=TRUE)
# MARCELO - just use line 12 to assign args to be the filepath you put my example selection tables and WAVs into
args <- "~/Downloads/delete/"
# make list of selection tables in file path
x <- ldply(list.files(path = args[1], pattern = "^automatic_detections*", full.names = TRUE), read.csv, header = TRUE)
# filter out NA selections
x <- x %>%
filter(!is.na(selection_length)) %>%
filter(selection_length >= 0)
# run function
st <- selection_table(x, path = args[1], extended = TRUE, mar = 0.05, confirm.extended = FALSE)
# get name for ext sel table
name <- str_split(st[[1]][1], "_")
name <- paste(name[[1]][1], name[[1]][2], sep = "_")
name
st
check_sels(st)
info_sound_files(args[1])
x
check_sels(x, path = args[1])
warbleR_options(path = args[1])
spectrograms(x)
spectrograms(x, flim = c(0, 10))
info_sound_files(args[1])
spectrograms(x, flim = c(20, 110))
spectrograms(x, flim = c(20, 110), mar = 0.001)
spectrograms(x, flim = c(20, 110), mar = 0.01)
spectrograms(st, flim = c(20, 110), mar = 0.01)
st$labs <- "extended"
spectrograms(st, flim = c(20, 110), mar = 0.01, title.labels = "labs")
#save ext sel table
saveRDS(st, file = paste(args[1], "marcelo_test.RDS", sep = ""))
# Chunk 1: packages
## add 'developer/' to packages to be installed from github
x <- c("remotes", "maRce10/warbleR", "bioacoustics", "viridis", "ggplot2", "maRce10/ohun", "DT")
aa <- lapply(x, function(y) {
# get pakage name
pkg <- strsplit(y, "/")[[1]]
pkg <- pkg[length(pkg)]
# check if installed, if not then install
if (!pkg %in% installed.packages()[,"Package"])  {
if (grepl("/", y))  remotes::install_github(y, force = TRUE) else
install.packages(y)
}
# load package
try(require(pkg, character.only = T), silent = T)
})
# Chunk 2: chunk opts
opts_knit$set(root.dir = "..")
opts_chunk$set( fig.width = 8, fig.height = 3.5)
data_path <- "./data/raw/thyroptera/"
# Chunk 3
library(ohun)
library(warbleR)
library(ggplot2)
library(viridis)
# Chunk 7: read data
# read data
manual_ref <- read.csv("./data/raw/thyroptera/manual_annotations_thyroptera.csv", stringsAsFactors = FALSE)
# Chunk 11: catalog
knitr::include_graphics(normalizePath(file.path(data_path, "Catalog_p1.jpeg")))
# Chunk 12: test and train
set.seed(1)
train_files <- sample(unique(manual_ref$sound.files), size = 5)
test_files <- setdiff(manual_ref$sound.files, train_files)
train_ref <- manual_ref[manual_ref$sound.files %in% train_files, ]
test_ref <- manual_ref[manual_ref$sound.files %in% test_files, ]
# Chunk 15: catalog templates
knitr::include_graphics(normalizePath(file.path(data_path, "templates-Catalog_p1.jpeg")))
# Chunk 19
opt_detec_train <- readRDS("./data/processed/optimization_results_3_templates_thyroptera.RDS")
diag_train <- summarize_diagnostic(opt_detec_train, time.diagnostics = FALSE)
agg_sd <- aggregate(precision ~ recall + templates, data = diag_train,
mean)
ggplot(agg_sd, aes(x = recall, y = precision, group = templates, color = templates)) +
geom_line() + geom_point() + scale_color_viridis_d(end = 1) + theme_classic()
# Chunk 21
# subset with highest performance
sub_diag_train <-diag_train[order(diag_train$f1.score, decreasing = TRUE), ]
sub_diag_train <- sub_diag_train[1:10, c("templates","threshold", "true.positives", "false.positives",  "false.negatives", "recall", "precision", "f1.score")]
# print dynamic table
oa_DT <- datatable(sub_diag_train, editable = list(target = "row"), rownames = FALSE, style = "bootstrap",
filter = "top", options = list(pageLength = 100, autoWidth = TRUE, dom = "ft"),
autoHideNavigation = TRUE, escape = FALSE)
formatRound(table = oa_DT, columns = sapply(sub_diag_train, is.numeric), 3)
templ <- "67%"
# extract optimal threshold
diag_train_67 <- diag_train[diag_train$templates == templ, ]
opt_thresh <- diag_train_67$threshold[which.max(diag_train_67$f1.score)]
# get correlation vectors for test files
corr_templ_test <- template_correlator(
templates = templates_est[templates_est$sound.file == templ, ],
path = data_path, files = unique(test_ref$sound.files),
hop.size = 10,
ovlp = 70
)
# detect on test files
detec_test <- template_detector(
template.correlations = corr_templ_test,
threshold = opt_thresh
)
templates_est <- readRDS("./data/processed/templates_thyroptera_est.RDS")
templ <- "67%"
# extract optimal threshold
diag_train_67 <- diag_train[diag_train$templates == templ, ]
opt_thresh <- diag_train_67$threshold[which.max(diag_train_67$f1.score)]
# get correlation vectors for test files
corr_templ_test <- template_correlator(
templates = templates_est[templates_est$sound.file == templ, ],
path = data_path, files = unique(test_ref$sound.files),
hop.size = 10,
ovlp = 70
)
# detect on test files
detec_test <- template_detector(
template.correlations = corr_templ_test,
threshold = opt_thresh
)
diagnose_detection(reference = test_ref, detection = detec_test)
saveRDS(detec_test, "./data/processed/detection_thyroptera_all_67%_template.RDS")
diag_train$templates
templ <- "0%"
# extract optimal threshold
diag_train_centroid <- diag_train[diag_train$templates == templ, ]
opt_thresh <- diag_train_centroid$threshold[which.max(diag_train_centroid$f1.score)]
# get correlation vectors for test files
corr_templ_test <- template_correlator(
templates = templates_est[templates_est$sound.file == templ, ],
path = data_path, files = unique(test_ref$sound.files),
hop.size = 10,
ovlp = 70
)
# detect on test files
detec_test <- template_detector(
template.correlations = corr_templ_test,
threshold = opt_thresh
)
diagnose_detection(reference = test_ref, detection = detec_test)
install.packages("rmdcount")
install.packages("rmdwc")
library(rmdwc)
files <- system.file('rmarkdown/rstudio_pdf.Rmd', package="rmdwc")
rmdcount(files)
files <- system.file('rmarkdown/rstudio_pdf.Rmd', package="rmdwc")
files
files <- system.file('../manuscript/manuscript.Rmd')
files
rmdcount('../manuscript/manuscript.Rmd')
rmdcount(normalizePath('../manuscript/manuscript.Rmd'))
normalizePath('../manuscript/manuscript.Rmd')
rmdcount(normalizePath('./manuscript/manuscript.Rmd'))
word_count[2]
word_count <- rmdcount(normalizePath('../manuscript/manuscript.Rmd'))
word_count[2]
word_count <- rmdcount(normalizePath('./manuscript/manuscript.Rmd'))
word_count[2]
print(paste("Word count:", word_count[2]))
word_count
word_count_chunk <- rmdcount(normalizePath('./manuscript/manuscript.Rmd'), exclude='')
word_count_chunk
print(paste("Word count:", word_count[3], "; including chunks:" word_count_chunk[3]))
word_count_chunk <- rmdcount(normalizePath('./manuscript/manuscript.Rmd'), exclude='')
print(paste("Word count:", word_count[3], "; including chunks:" word_count_chunk[3]))
word_count_chunk
print(paste("Word count:", word_count[3], "; including chunks:", word_count_chunk[3]))
print(paste0("Word count: ", word_count[3], "; including chunks: ", word_count_chunk[3]))
print(paste0("Word count: ", word_count[3], " (including chunks: ", word_count_chunk[3], ")"))
Sys.Date()
cat(paste("updated on",  `r Sys.Date()`)
warbleR_options(wav.path = "./data/raw/thyroptera/", wl = 300, parallel = 1, bp = "frange", fast = F, threshold = 15, ovlp = 20)
warbleR_options(wav.path = "./data/raw/thyroptera/", wl = 300, parallel = 1, bp = "frange", fast = F, threshold = 15, ovlp = 20)
wi <- info_sound_files()
wi
warbleR_options(wav.path = "./data/raw/taeniopygia/", wl = 300, parallel = 1, bp = "frange", fast = F, threshold = 15, ovlp = 20)
wi <- info_sound_files()
wi
wi$sample.rate
#Load data in R
library("readxl")
library(sketchy)
make_compendium(name = "litter_decomposition", path = "~/Dropbox/Projects/", git = TRUE, Rproj = TRUE, format = "sketchy")
names(compendiums)
remove.packages("sketchy")
install.packages("sketchy")
library(sketchy)
make_compendium(name = "litter_decomposition", path = "~/Dropbox/Projects/", git = TRUE, Rproj = TRUE, format = "sketchy")
names(compendiums)
remove.packages("sketchy")
remotes::install_github("maRce10/sketchy")
make_compendium(name = "litter_decomposition", path = "~/Dropbox/Projects/", git = TRUE, Rproj = TRUE, format = "sketchy")
library(sketchy)
make_compendium(name = "litter_decomposition", path = "~/Dropbox/Projects/", git = TRUE, Rproj = TRUE, format = "sketchy")
load("~/Dropbox/R_package_testing/PhenotypeSpace/data/example_space.rda")
unique(example_space$color)
source("~/Dropbox/R_package_testing/ohun/R/get_templates.R")
# Chunk 1
# how to cite in Rmarkdown
# https://rmarkdown.rstudio.com/authoring_bibliographies_and_citations.html
# Here include the path to the libraries for each author. This code will copy/update the library each time the Rmarkdown file is compiled
# Alternatively authors ca
personal_libraries <- c(author_1 = "path/to/lib.file/from/author1/library.bib", author_2 = "path/to/lib.file/from/author2/library.bib")
# update bibtex library
for (i in 1:length(personal_libraries))
if (file.exists(personal_libraries[i]))
file.copy(from = personal_libraries[i], to = file.path(getwd(), paste0(names(personal_libraries)[i], ".bib")), overwrite = TRUE)
## combine .bib files in compiled.bib ###
# list bib files
bibs <- list.files(pattern = ".bib$")
# remove combined from pool
bibs <- bibs[bibs != "combined_bibs.bib"]
#  read in a list
if (length(bibs) > 0){
combined_bibs_l <- lapply(bibs, readLines)
names(combined_bibs_l) <- gsub("\\.bib$", "", bibs)
# combine bibs in a single one
combined_bibs <- unlist(combined_bibs_l)
# save pool libraries as combined_bibs.bib
writeLines(text = combined_bibs, "combined_bibs.bib")
# check if there are duplicated keys
keys <- grep("@article{", combined_bibs, fixed = TRUE, value = TRUE)
keys <- gsub("@article{", "", keys, fixed = TRUE)
keys <- gsub(",", "", keys, fixed = TRUE)
tab_keys <- table(keys)
if (anyDuplicated(keys)){
print(paste0(sum(tab_keys > 1), " duplicate(s) references found in combined_bibs.bib"))
}
} else writeLines(text = "empty", "combined_bibs.bib")
# Chunk 2: packages
library(knitr)
library(ohun)
library(ggplot2)
library(viridis)
library(kableExtra)
library(rmdwc)
# Chunk 3
# knitr::opts_knit$set(root.dir = rprojroot::find_rstudio_root_file())
# opts_knit$set(root.dir = "..")
# opts_chunk$set(root.dir = "..")
base.dir <- ".."
# Chunk 4: word count
cat(paste("Updated on", Sys.Date(), "<br>"))
word_count <- rmdcount(normalizePath(file.path(base.dir, '/manuscript/manuscript.Rmd')))
word_count_chunk <- rmdcount(normalizePath(file.path(base.dir, '/manuscript/manuscript.Rmd')), exclude='')
cat(paste0("Word count: ", word_count[3], " (including chunks: ", word_count_chunk[3], ")"))
# Chunk 5
library(Rraven)
# read data
manual_ref_thy <- read.csv(file.path(base.dir, "//data/raw/thyroptera/", "manual_annotations_thyroptera.csv"))
manual_ref_tae <- read.csv(file.path(base.dir, "/data/processed/taeniopygia", "manual_selections_Taeniopygia.csv"))
raven_detec <- imp_raven(path = file.path(base.dir, "/data/raw/"), files = "Raven.Band.Limited.Energy.Detector.selections.txt", warbler.format = TRUE)
# raven_ref <- manual_ref[manual_ref$sound.files %in% raven_detec$sound.files, ]
# Chunk 6
diagnose_detection(reference = manual_ref_tae, detection = raven_detec)
# Chunk 7
diag_raven <- diagnose_detection(reference = manual_ref_tae, detection = raven_detec, by.sound.file = TRUE)
head(diag_raven)
# Chunk 8: catalog
# knitr::include_graphics(normalizePath(file.path("./data/raw/thyroptera", "Catalog_p1.jpeg")))
knitr::include_graphics("~/Dropbox/Projects/ohun_paper/data/raw/thyroptera/Catalog_p1.jpeg")
base.dir <- "."
# read manual annotations
manual_ref_thy <- read.csv(file.path(base.dir, "/data/raw/thyroptera/", "manual_annotations_thyroptera.csv"))
# get random subset of 5 sound files for training
set.seed(1)
train_files <- sample(unique(manual_ref_thy$sound.files), size = 5)
train_ref <- manual_ref_thy[manual_ref_thy$sound.files %in% train_files, ]
# the rest for testing
test_files <- setdiff(manual_ref_thy$sound.files, train_files)
test_ref <- manual_ref_thy[manual_ref_thy$sound.files %in% test_files, ]
templates <- get_templates(train_ref, path = file.path(base.dir, "/data/raw/thyroptera/"),  bp = c(10, 50), fast = TRUE, ovlp = , wl = 200, n.sub.spaces = 3)
source("~/Dropbox/R_package_testing/ohun/R/get_templates.R")
source("~/Dropbox/R_package_testing/ohun/R/get_templates.R")
# read manual annotations
manual_ref_thy <- read.csv(file.path(base.dir, "/data/raw/thyroptera/", "manual_annotations_thyroptera.csv"))
# get random subset of 5 sound files for training
set.seed(1)
train_files <- sample(unique(manual_ref_thy$sound.files), size = 5)
train_ref <- manual_ref_thy[manual_ref_thy$sound.files %in% train_files, ]
# the rest for testing
test_files <- setdiff(manual_ref_thy$sound.files, train_files)
test_ref <- manual_ref_thy[manual_ref_thy$sound.files %in% test_files, ]
templates <- get_templates(train_ref, path = file.path(base.dir, "/data/raw/thyroptera/"),  bp = c(10, 50), fast = TRUE, ovlp = , wl = 200, n.sub.spaces = 3)
source("~/Dropbox/R_package_testing/ohun/R/get_templates.R")
# find templates
templates <- get_templates(train_ref, path = data_path,  bp = c(10, 50), fast = TRUE, ovlp = , wl = 200, n.sub.spaces = 3)
templates <- get_templates(train_ref, path = file.path(base.dir, "/data/raw/thyroptera/"),  bp = c(10, 50), fast = TRUE, ovlp = , wl = 200, n.sub.spaces = 3)
source("~/Dropbox/R_package_testing/ohun/R/get_templates.R")
templates <- get_templates(train_ref, path = file.path(base.dir, "/data/raw/thyroptera/"),  bp = c(10, 50), fast = TRUE, ovlp = , wl = 200, n.sub.spaces = 3)
source("~/Dropbox/R_package_testing/ohun/R/get_templates.R")
templates <- get_templates(train_ref, path = file.path(base.dir, "/data/raw/thyroptera/"),  bp = c(10, 50), fast = TRUE, ovlp = , wl = 200, n.sub.spaces = 3)
source("~/Dropbox/R_package_testing/ohun/R/get_templates.R")
templates <- get_templates(train_ref, path = file.path(base.dir, "/data/raw/thyroptera/"),  bp = c(10, 50), fast = TRUE, ovlp = , wl = 200, n.sub.spaces = 3)
source("~/Dropbox/R_package_testing/ohun/R/get_templates.R")
templates <- get_templates(train_ref, path = file.path(base.dir, "/data/raw/thyroptera/"),  bp = c(10, 50), fast = TRUE, ovlp = , wl = 200, n.sub.spaces = 3)
agg_f1 <- aggregate(f1.score ~ threshold + templates, data = opt_detec_train,
mean)
ggplot(agg_f1, aes(x = threshold, y = f1.score, group = templates, color = templates)) +
geom_line() +
geom_point() +
scale_color_viridis_d(end = 1, labels = c("Centroid", "1st", "2nd", "3rd"), alpha = 0.7) +
labs(x= "Cross-correlation threshold", y = "F1 score", color = "Templates")
theme_classic()
agg_f1 <- aggregate(f1.score ~ threshold + templates, data = opt_detec_train,
mean)
ggplot(agg_f1, aes(x = threshold, y = f1.score, group = templates, color = templates)) +
geom_line() +
geom_point() +
scale_color_viridis_d(end = 1, labels = c("Centroid", "1st", "2nd", "3rd"), alpha = 0.7) +
labs(x= "Cross-correlation threshold", y = "F1 score", color = "Templates")
theme_classic()
agg_f1 <- aggregate(f1.score ~ threshold + templates, data = opt_detec_train,
mean)
ggplot(agg_f1, aes(x = threshold, y = f1.score, group = templates, color = templates)) +
geom_line() +
geom_point() +
scale_color_viridis_d(end = 1, labels = c("Centroid", "1st", "2nd", "3rd"), alpha = 0.7) +
labs(x= "Cross-correlation threshold", y = "F1 score", color = "Templates")
source("~/Dropbox/R_package_testing/ohun/R/get_templates.R")
matrix(1:100, nrow = 4)
m <- matrix(1:100, nrow = 4)
colnames(m)
colnames(m)
source("~/Dropbox/R_package_testing/ohun/R/get_templates.R")
templates <- get_templates(train_ref, path = file.path(base.dir, "/data/raw/thyroptera/"),  bp = c(10, 50), fast = TRUE, ovlp = , wl = 200, n.sub.spaces = 3)
source("~/Dropbox/R_package_testing/ohun/R/get_templates.R")
templates <- get_templates(train_ref, path = file.path(base.dir, "/data/raw/thyroptera/"),  bp = c(10, 50), fast = TRUE, ovlp = , wl = 200, n.sub.spaces = 3)
templates <- get_templates(train_ref, path = file.path(base.dir, "/data/raw/thyroptera/"),  bp = c(10, 50), fast = TRUE, ovlp = , wl = 512, n.sub.spaces = 3)
templates$sound.files
# find templates
templates <- get_templates(train_ref, path = data_path,  bp = c(10, 50), fast = TRUE, ovlp = , wl = 200, n.sub.spaces = 3)
templates[, c("sound.files", "selec")]
templates <- get_templates(train_ref, path = file.path(base.dir, "/data/raw/thyroptera/"),  bp = c(10, 50), fast = TRUE, ovlp = , wl = 200, n.sub.spaces = 3)
templates[, c("sound.files", "selec")]
templates <- get_templates(train_ref, path = file.path(base.dir, "/data/raw/thyroptera/"),  bp = c(10, 50), fast = TRUE, ovlp = , n.sub.spaces = 3)
templates[, c("sound.files", "selec")]
templates <- get_templates(train_ref, path = file.path(base.dir, "/data/raw/thyroptera/"),  bp = c(10, 50), fast = TRUE, ovlp = 70, wl = 200, n.sub.spaces = 3)
templates <- get_templates(train_ref, path = file.path(base.dir, "/data/raw/thyroptera/"),  bp = c(10, 50), ovlp = 70, wl = 200, n.sub.spaces = 3)
?par
remove.packages("ohun")
# github packages must include user name ("user/package")
# knitr is require for creating html/pdf/word reports
# kableExtra is used to print pretty formatted tables
# formatR is used for soft-wrapping code
# klippy is used for adding a copy button to each code block
library(knitr)
library(ohun)
library(ggplot2)
library(viridis)
library(kableExtra)
library(rmdwc)
pkgs <- c("kableExtra", "knitr", "rprojroot", "sciRmdTheme", "rmdwc", "whereami", "maRce10/ohun", "ggplot2", "viridis", "rmdwc")
# install/ load packages
out <- lapply(pkgs, function(y) {
# get pakage name
pkg <- strsplit(y, "/")[[1]]
pkg <- pkg[length(pkg)]
# check if installed, if not then install
if (!pkg %in% installed.packages()[,"Package"])  {
if (grepl("/", y))  remotes::install_github(y, force = TRUE) else
install.packages(y)
}
# load package
a <- try(require(pkg, character.only = T), silent = T)
if (!a) remove.packages(pkg)
})
